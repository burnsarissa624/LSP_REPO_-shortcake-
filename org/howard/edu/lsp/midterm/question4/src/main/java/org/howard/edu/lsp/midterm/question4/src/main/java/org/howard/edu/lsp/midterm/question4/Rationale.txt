Rationale – Question 4
Device is defined as an abstract class because it provides shared state and behaviors (id, location, heartbeat, connectivity) that all devices need but leaves getStatus() abstract for subclasses to implement their own details. This prevents duplicate code while allowing flexibility.

The Networked and BatteryPowered interfaces add optional behaviors without forcing unrelated classes to inherit them, demonstrating composition through interface implementation.

This is not true multiple inheritance ; Java allows one superclass but multiple interfaces—so this design safely combines abstraction and shared behavior.

